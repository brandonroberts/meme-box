# This is a basic workflow to help you get started with Actions

name: Nightly build of develop

on:
  schedule:
    - cron: 0 4 * * *
  workflow_dispatch:
    inputs:

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest

    # Map a step output to a job output
    outputs:
      uploadURL: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: develop
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Get current date
        id: date
        run: echo "name=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Test with environment variables
        run: echo $TAG_NAME - $RELEASE_NAME
        env:
          TAG_NAME: nightly-tag-${{ steps.date.outputs.date }}
          RELEASE_NAME: nightly-release-${{ steps.date.outputs.date }}
      - name: Get current time
        uses: gerred/actions/current-time@master
        id: current-time
      - name: Create version_info.json
        uses: schdck/create-env-json@v1
        id: create-env
        with:
          file-name: './src/version_info.json'
          VERSION_TAG: ${{ env.TAG_NAME }}
          COMMIT: ${{ steps.vars.outputs.sha_short }}
          BUILD_TIME: ${{ steps.current-time.outputs.time }}
          BRANCH: ${{ steps.vars.outputs.branch }}

      - name: Uploading Version Info Artifact
        uses: actions/upload-artifact@v2
        with:
          name: version_info
          path: './src/version_info.json'


      - run: npm install
      - run: npm run build:prepare
      - run: npm run build:all

      - name: Uploading Angular Dist Files
        uses: actions/upload-artifact@v2
        with:
          name: angular-dist
          path: dist

      - run: npm run electron:build:only

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease:  true
          owner: 'meme-box'
          repo: 'nightly-builds'
      - name: Upload Release Asset Windows Headless
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox.exe
          asset_name: memebox-headless.exe
          asset_content_type: application/vnd.microsoft.portable-executable

